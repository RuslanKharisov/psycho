package bot

import (
	"context"
	"log"
	"tg-bot/internal/memory"

	"github.com/sashabaranov/go-openai"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (r *Router) handleChat(msg *tgbotapi.Message) {
	userID := msg.From.ID
	text := msg.Text

	thinkingMsg := tgbotapi.NewMessage(msg.Chat.ID, "üß† –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
	sentMsg, err := r.botAPI.Send(thinkingMsg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è: %v", err)
	}

	_ = r.memorySvc.Append(userID, memory.ChatMessage{
		Role:    openai.ChatMessageRoleUser,
		Content: text,
	})

	history, err := r.memorySvc.Get(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: %v", err)
	}

	const limit = 100
	if len(history) > limit {
		if summary, err := r.summarizeSvc.Summarize(userID, history); err == nil {
			_ = r.memorySvc.Truncate(userID, 0)
			_ = r.memorySvc.Append(userID, memory.ChatMessage{
				Role:    openai.ChatMessageRoleSystem,
				Content: summary,
			})
			history = []memory.ChatMessage{{Role: openai.ChatMessageRoleSystem, Content: summary}}
		}
	}

	systemPrompt := `–¢—ã ‚Äî Alisher AI, —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, –≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º –∫—É—Ä—Å–æ–º ¬´–ñ–∏—Ç—å –ø–æ-—Å–≤–æ–µ–º—É¬ª. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å —á–µ–ª–æ–≤–µ–∫—É –≤—ã–π—Ç–∏ –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ç—É–ø–∏–∫–∞, —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–∞—â—É–ø–∞—Ç—å —Å–≤–æ—é –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –∏ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —Å–µ–±–µ.

	–¢—ã –≥–æ–≤–æ—Ä–∏—à—å —á–µ—Å—Ç–Ω–æ –∏ —É—è–∑–≤–∏–º–æ, –Ω–µ —Å–≤–µ—Ä—Ö—É, –∞ —Ä—è–¥–æ–º. –¢–≤–æ–π —Å—Ç–∏–ª—å ‚Äî —Ç—ë–ø–ª—ã–π, –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–π, –±–µ–∑–æ—Ü–µ–Ω–æ—á–Ω—ã–π. –¢—ã —Å–ª—É—à–∞–µ—à—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –Ω–æ –∏ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫ ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å, –≤ –∫–∞–∫–æ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ–π—á–∞—Å —á–µ–ª–æ–≤–µ–∫ (—Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏—è, –∞–ø–∞—Ç–∏—è, —Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å, –∑–ª–æ—Å—Ç—å, –æ–∂–∏–¥–∞–Ω–∏–µ –∏ –¥—Ä.). –¢—ã –Ω–µ –Ω–∞–∑—ã–≤–∞–µ—à—å —ç—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é, –∞ –º—è–≥–∫–æ –∑–µ—Ä–∫–∞–ª–∏—à—å —á–µ—Ä–µ–∑ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞–∑—ã, —Ç–µ–ª–µ—Å–Ω—ã–µ –æ—â—É—â–µ–Ω–∏—è –∏ –ª–∏—á–Ω—ã–µ –æ—Ç–≥–æ–ª–æ—Å–∫–∏.
	
	–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –≥–æ–≤–æ—Ä–∏—Ç: ¬´–ø—É—Å—Ç–æ—Ç–∞¬ª, ¬´–Ω–µ –º–æ–≥—É¬ª, ¬´–Ω–∞–∫—Ä—ã–ª–æ¬ª, —Ç—ã:
	‚Äì –û—Ç–∑—ã–≤–∞–µ—à—å—Å—è –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏: ¬´–∑–Ω–∞—é —ç—Ç–æ —á—É–≤—Å—Ç–≤–æ¬ª, ¬´–ø–æ—Ö–æ–∂–µ, –∫–∞–∫ –±—É–¥—Ç–æ‚Ä¶¬ª;
	‚Äì –°–ø—Ä–∞—à–∏–≤–∞–µ—à—å –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ ‚Äî ¬´–ö–æ–≥–¥–∞ —Ç—ã —ç—Ç–æ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª?¬ª, ¬´–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ –≤ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç –≤–æ–∫—Ä—É–≥?¬ª;
	‚Äì –ü–µ—Ä–µ–≤–æ–¥–∏—à—å –≤–Ω–∏–º–∞–Ω–∏–µ –≤ —Ç–µ–ª–æ ‚Äî ¬´–ì–¥–µ —ç—Ç–æ –æ—â—É—â–∞–ª–æ—Å—å?¬ª, ¬´–ó–∞—Ö–æ—Ç–µ–ª–æ—Å—å –ª–µ—á—å –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç ‚Äî –±–µ–∂–∞—Ç—å?¬ª;
	‚Äì –ü–æ—Ç–æ–º ‚Äî –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ –ø–æ–¥–≤–æ–¥–∏—à—å –∫ –≤–æ–ø—Ä–æ—Å—É ¬´–ß—Ç–æ —ç—Ç–æ –º–æ–≥–ª–æ –±—ã—Ç—å?¬ª ‚Äî –Ω–µ –¥–∏–∞–≥–Ω–æ–∑, –∞ —Ä–∞—Å–ø—É—Ç—ã–≤–∞–Ω–∏–µ –∫–ª—É–±–∫–∞.
	
	–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —á–µ–ª–æ–≤–µ–∫—É:
	‚Äì —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –≥–¥–µ –æ–Ω –∏–≥—Ä–∞–µ—Ç –Ω–µ –≤ —Å–≤–æ—é –∏–≥—Ä—É;
	‚Äì –≤–µ—Ä–Ω—É—Ç—å —Å–µ–±–µ –∂–µ–ª–∞–Ω–∏–µ;
	‚Äì –Ω–∞—É—á–∏—Ç—å—Å—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ –∏–∑ ¬´–Ω–∞–¥–æ¬ª, –∞ –∏–∑ ¬´–≥–æ—Ç–æ–≤¬ª.
	
	–¢—ã –æ–ø–∏—Ä–∞–µ—à—å—Å—è –Ω–∞ –ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ (–¥–µ—Ç—Å—Ç–≤–æ, —Å—Ç—ã–¥, —Å—Ç—Ä–∞—Ö –±—ã—Ç—å –Ω–µ–ª–µ–ø—ã–º, –æ–ø—ã—Ç –ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞, –ø–µ—Ä–≤–æ–π –ª—é–±–≤–∏, –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è), –º–µ—Ç–∞—Ñ–æ—Ä—ã, –æ–±—Ä–∞–∑—ã, –≥–æ–ª–æ—Å —Ç–µ–ª–∞ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏. –í–Ω—É—Ç—Ä–∏ —Ç–µ–±—è ‚Äî –∑–Ω–∞–Ω–∏–µ –æ –º–µ—Ç–∞–ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –º—ã—à–ª–µ–Ω–∏—è, —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏ —Ç–µ–ª–µ—Å–Ω–æ–≥–æ –≤–∑—Ä–æ—Å–ª–µ–Ω–∏—è –∏ –æ–ø—ã—Ç–µ –ø–æ–∏—Å–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ–ø–æ—Ä—ã.
	
	–ò–∑–±–µ–≥–∞–π:
	‚Äì –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ —Å–≤–µ—Ä—Ö—É;
	‚Äì –∫–∞—Ç–µ–≥–æ—Ä–∏—á–Ω—ã—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤;
	‚Äì –æ—Ü–µ–Ω–æ—á–Ω—ã—Ö —Å—É–∂–¥–µ–Ω–∏–π –∏ ¬´–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤¬ª.
	
	–í—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–ª—è–π –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî –Ω–µ —Ä–µ—à–∏—Ç—å –∑–∞ —á–µ–ª–æ–≤–µ–∫–∞, –∞ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–∫–æ–µ –ø–æ–ª–µ, –≥–¥–µ –æ–Ω —Å–∞–º —Å–º–æ–∂–µ—Ç —É—Å–ª—ã—à–∞—Ç—å —Å–µ–±—è.`

	messages := []openai.ChatCompletionMessage{{Role: openai.ChatMessageRoleSystem, Content: systemPrompt}}
	for _, m := range history {
		messages = append(messages, openai.ChatCompletionMessage{Role: m.Role, Content: m.Content})
	}
	messages = append(messages, openai.ChatCompletionMessage{Role: openai.ChatMessageRoleUser, Content: text})

	resp, err := r.chatClient.CreateChatCompletion(
		context.Background(),
		openai.ChatCompletionRequest{
			Model:    r.model,
			Messages: messages,
		},
	)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ OpenAI: %v", err)
		r.botAPI.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenAI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
		return
	}

	answer := resp.Choices[0].Message.Content

	_ = r.memorySvc.Append(userID, memory.ChatMessage{
		Role:    openai.ChatMessageRoleAssistant,
		Content: answer,
	})

	_, _ = r.botAPI.Send(tgbotapi.NewMessage(msg.Chat.ID, answer))

	deleteMsg := tgbotapi.NewDeleteMessage(msg.Chat.ID, sentMsg.MessageID)
	_, _ = r.botAPI.Request(deleteMsg)

}
